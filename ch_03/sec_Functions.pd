Пример работы в консоли с помощью _gshell_
------------------------------------------

Пример процедуры работы пользователя с проектом _project_ при помощи
_gshell_:

\begin{code}[language=bash,label=lst:example1,
                   caption={}]
$ gshell init project
$ gshell enter project
work-id8172 $ touch x
work-id8172 $ gshell exit
\end{code}

Изначально пользователь вызывает _gshell_ с аргументами *init* и названием
проекта. Это создает необходимые начальные файлы и папки. Создается папка
проекта, `.gshell`, нулевая ревизия (в которой записываются пустые предки,
пустое сообщение commit и время создания), в мастер ветку она же и
записывается.

Далее пользователь вызывает _gshell_ с аргументами *enter* и названием проекта.

Что происходит "внутри" во время исполнения этой команды:

* Создается подпапка в папке проекта для новой сессии.
* Берется последняя ревизия из мастер ветки.
* Строится дерево из всех ее предшественников (основываясь на файле parents).
* Создается новая ревизия, в которую будет писать новая сессия.
* Монтируется при помощи _unionfs_ получившаяся ветка в новосозданную папку 
для сессии.
* Получив путь к рабочей директории, папка делается активной для пользователя.
* Пользователь перемешается в новую сессию.

Затем пользователь может выполнять любые действия в данной сессии. За
исключением действий по выходу из папки на уровни выше, так как это уже не будет
управляться _gshell_.

Каждое действие пользователя сохраняется. 

Когда введена команда и нажата клавиша для ее исполнения:

* Фиксируется состояние проекта.
* Выполняется команда.
* Текст команды записывается как сообщение данной ревизии, говорящее о том, как
* это состояние было получено.
* Фиксируется время исполнения в ревизии.

Все это нужно для того, чтобы множество ревизий отображало проект на фазе
каждой команды. Имея множество состояний мы можем перемещаться в любой момент
работы. Если была сделана ошибка, мы можем "откатиться" назад, исправить ошибку
и получить новое состояние системы без прошлой оплошности. Это и позволяет нам
в дальнейшем, получать информацию о том, что мы делали с тем или иным файлом.
Поскольку в каждой ревизии фиксируется какие файлы были изменены, а так же какие
файлы из каких предыдущих ревизий были затронуты. На запрос об истории файла мы
можем пройтись по всем ревизиям, которые используются в текущей сессии и по
информации о доступе однозначно сказать, какие команды были использованы по
отношению к файлу.

Когда пользователь получит необходимый результат он может выйти из программы,
оставив весь проект как есть. Но так же присутствует возможность удаления
проекта, но не результирующих файлов.

Человек может работать в проекте одновременно из нескольких терминалов. Это было
реализовано при помощи создания мастер ветки ревизий. Изначально, каждая сессия
не зависит от другой (только от тех ревизий, что были уже в мастер ветке, тк
новая сессия всегда начинается от последнего состояния в главной ветке). Она
имеет собственную историю и список используемых ревизий. Но если пользователю
нужно сделать данную ревизию и ее родителей основной, то есть что бы другие
результаты были основаны на ней, он может добавить ее в мастер ветку. При
существовании конфликтов файлов происходит процесс объединения. Он прост --- тот
файл, что старше, будет заменен файлом который моложе. Это реализовано за счет
того, что ревизии монтируются по времени создания (завершения команды, что
записана в качестве сообщения).

Стоит отметить, что во время сессии команды _gshell_ не фиксируются в истории.
