Инструменты для реализации
--------------------------

Для реализации данной идеи необходимо было использовать инструмент, который
позволяет:

* Работать со структурой файловой системы.
* Уметь вызывать другие программы.
* Обрабатывать результат выполнения других программ.

Таким образом, в реализации данного проекта не важен язык программирования
(далее -- ЯП), так как задача, которую надо реализовать, в принципе, выполнима
при помощи большинства современных прикладных ЯП.

Первоначально, для разработки был выбран язык _Rust_. Он превосходно подходит
для такой задачи, так как изначально позиционировался как инструмент для
разработки системных приложений. Еще он имеет строгую систему типизации, что
позволяет избежать многих ошибок. _Rust_ компилируется в нативный код, что
сказывается на его быстродействии. Но на момент начала работы над задачей, он
находился в стадии активной разработки, не имея стабильной версии. Разработчики
часто вносили необратимые изменения в язык, из-за которых необходимо было
проделывать много работы заново. По этой причине от этого инструмента
отказались.

В итоге, ввиду личных предпочтений, решено было использовать язык _Haskell_.

Это высокоуровневый функциональный язык программирования.

Его преимущества:

* Строго типизирован.
* Компилируется в нативный код.
* Позволяет работать в операционной системе _Linux_.
* Широко распространен.
* Требует меньшего написания кода для выполнения тех же задач (если сравнивать с
_C++_ или _Java_, например).

Недостатки:

* Требует высокую квалификацию программиста для реализации программы.
