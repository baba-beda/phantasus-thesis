Инструменты для реализации
--------------------------

Для реализации данной идеи необходимо было использовать инструмент, который
позволяет:

* Работать со структурой файловой системы.
* Уметь вызывать другие программы.
* Обрабатывать результат выполнения других программ.

Таким образом, в реализации данного проекта не важен язык программирования, так
как задача, которую надо реализовать, в принципе, выполнима при помощи
большинства современных прикладных ЯП.

Изначально для разработки был выбран язык _Rust_. Он превосходно подходит для
такой задачи, так как изначально позиционировался как инструмент для разработки
системных приложений. Так же он имеет строгую систему типизации, что позволяет
избежать многих ошибок. _Rust_ компилируется в нативный код, что сказывается на
его быстродействии. Но на момент начала работы над задаче, он находился в стадии
активной разработки, не имея стабильной версии. Разработчики часто вносили
необратимые изменения в язык, из-за которых необходимо было проделывать много
работы заново. По этой причине, от этого инструменты отказались.

В итоге, из-за личных предпочтений, решено было использовать язык _Haskell_.

Данный язык программирования является высокоуровневым функциональным языком.

Его преимущества:

* Строго типизирован.
* Компилируется в нативный код.
* Позволяет работать в операционной системе Linux.
* Широко распространен.
* Требует меньшего написания кода для выполнения тех же задач (если сравнивать с
_C++_ или _Java_, например).

Недостатки:

* Требует высокую квалификацию программиста для реализации программы.
